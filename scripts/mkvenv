#!/usr/bin/env bash
# ============================================================
# Script: mkvenv
# Descripción: Automatiza la creación y configuración de entornos virtuales Python.
# Instalación sugerida: /usr/bin/mkvenv (con permisos de ejecución)
# Autor: 0xHaise
# ============================================================

set -euo pipefail

# --- Funciones de utilidad ---
usage() {
    echo "Uso: mkvenv [nombre_env] [-p python_version] [-r requirements.txt] [--activate]"
    echo
    echo "Ejemplos:"
    echo "  mkvenv .venv                    # Crea un entorno .venv con python3"
    echo "  mkvenv env -p python3.12        # Usa una versión específica de Python"
    echo "  mkvenv myenv -r requirements.txt  # Instala dependencias automáticamente"
    echo "  mkvenv myenv --activate         # Crea y activa el entorno"
    exit 1
}

# --- Parámetros por defecto ---
ENV_NAME=".venv"
PYTHON_BIN="python3"
REQ_FILE=""
ACTIVATE_AFTER=false

# --- Parseo de argumentos ---
while [[ $# -gt 0 ]]; do
    case "$1" in
        -p|--python)
            PYTHON_BIN="$2"
            shift 2
            ;;
        -r|--requirements)
            REQ_FILE="$2"
            shift 2
            ;;
        --activate)
            ACTIVATE_AFTER=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            ENV_NAME="$1"
            shift
            ;;
    esac
done

# --- Verificar dependencias ---
if ! command -v "$PYTHON_BIN" &>/dev/null; then
    echo "[ERROR] No se encontró el intérprete $PYTHON_BIN. Instálalo o usa otra versión." >&2
    exit 1
fi

# --- Crear entorno virtual ---
if [[ -d "$ENV_NAME" ]]; then
    echo "[INFO] El entorno '$ENV_NAME' ya existe. Omitiendo creación."
else
    echo "[INFO] Creando entorno virtual con $PYTHON_BIN en '$ENV_NAME'..."
    "$PYTHON_BIN" -m venv "$ENV_NAME"
    echo "[OK] Entorno creado."
fi

# --- Activar entorno temporalmente para instalación ---
# shellcheck disable=SC1091
source "$ENV_NAME/bin/activate"

# --- Actualizar pip ---
echo "[INFO] Actualizando pip..."
pip install --upgrade pip >/dev/null

# --- Instalar requerimientos si existen ---
if [[ -n "$REQ_FILE" ]]; then
    if [[ -f "$REQ_FILE" ]]; then
        echo "[INFO] Instalando dependencias desde $REQ_FILE..."
        pip install -r "$REQ_FILE"
    else
        echo "[ADVERTENCIA] No se encontró el archivo $REQ_FILE. Omitiendo instalación."
    fi
elif [[ -f "requirements.txt" ]]; then
    echo "[INFO] Detectado requirements.txt en el directorio actual. Instalando..."
    pip install -r requirements.txt
fi

deactivate

# --- Activar entorno si se solicitó ---
if [[ "$ACTIVATE_AFTER" == true ]]; then
    echo "[INFO] Activando entorno '$ENV_NAME'..."
    # shellcheck disable=SC1091
    source "$ENV_NAME/bin/activate"
fi

echo "[OK] Entorno Python '$ENV_NAME' listo."

